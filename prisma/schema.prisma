// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("client") // client or admin
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  blockedSlots  BlockedSlot[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id              String   @id @default(cuid())
  userId          String
  name            String
  email           String
  phone           String
  service         String
  serviceCategory String?  // "clinic", "home", "sports"
  date            String
  time            String
  sessionType     String?  // "new" or "followup"
  sessionDuration Int?     // Duration in minutes
  message         String?
  emergencyContact String?
  medicalHistory  String?
  currentMedications String?
  previousPhysiotherapy String?
  status          String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClinicSettings {
  id            String   @id @default(cuid())
  openingTime   String   @default("09:00") // Format: "HH:MM"
  closingTime   String   @default("17:00") // Format: "HH:MM"
  breakStart    String?  // Format: "HH:MM"
  breakEnd      String?  // Format: "HH:MM"
  blockedPeriods Json?   // Array of {start: "HH:MM", end: "HH:MM", reason: "string"}
  workingDays   Json     @default("[1,2,3,4,5]") // Array of day numbers (0=Sunday, 1=Monday, etc.)
  timeSlotDuration Int   @default(30) // Duration in minutes
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BlockedSlot {
  id        String   @id @default(cuid())
  date      String   // Format: "YYYY-MM-DD"
  time      String   // Format: "HH:MM"
  reason    String   // Reason for blocking the slot
  createdBy String   // User ID of admin who created the block
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([date, time]) // Ensure no duplicate blocks for same date/time
}
